class Light:
    def __init__(self, dim):
        self.dim = dim
        self.grid = [[0 for i in range(dim[0])] for _ in range(dim[1])]
        self.lights = []
        self.obstacles = []

    def set_dim(self, dim):
        self.dim = dim
        self.grid = [[0 for i in range(dim[0])] for _ in range(dim[1])]

    def set_lights(self, lights):
        self.lights = lights
        self.generate_lights()

    def set_obstacles(self, obstacles):
        self.obstacles = obstacles
        self.generate_lights()

    def generate_lights(self):
        return self.grid.copy()


class System:
    def __init__(self):
        self.map = self.grid = [[0 for i in range(30)] for _ in range(20)]
        self.map[5][7] = 1  # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞
        self.map[5][2] = -1  # –°—Ç–µ–Ω—ã

    def get_lightening(self, light_mapper):
        self.lightmap = light_mapper.lighten(self.map)


class MappingAdapter:

    def __init__(self, adaptee):
        self.adaptee = adaptee

    def _get_objects_by_grid(self, descriptor, grid):
        result = []
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == descriptor:
                    result.append(tuple([j, i]))
        return result

    def get_lights(self, grid):
        return self._get_objects_by_grid(1, grid)

    def get_obstacles(self, grid):
        return self._get_objects_by_grid(-1, grid)

    def lighten(self, grid):
        # set map's size
        dim = (len(grid[0]), len(grid))
        self.adaptee.set_dim(dim)

        # get lists of lights and obstacles
        lights = self.get_lights(grid)
        obstacles = self.get_obstacles(grid)

        # set lights and obstacles
        self.adaptee.set_obstacles(obstacles)
        self.adaptee.set_lights(lights)

        # get map of lighten
        return self.adaptee.generate_lights()


system = System()
light = Light((len(system.map[0]), len(system.map)))
print(len(system.map[0]), len(system.map))

adapter = MappingAdapter(light)
system.get_lightening(adapter)

# UPD: –í—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. –ú–æ—è –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –ª–∏—à–Ω–µ–º –∫–æ–¥–µ.
# class MappingAdapter:
#     def __init__(self, adaptee):
#         self.adaptee = adaptee
#
#     def lighten(self, grid):
#         dim = (len(grid[0]), len(grid))
#         self.adaptee.set_dim(dim)
#
#         for i in range(len(grid)):
#             for j in range(len(grid[0])):
#                 if grid[i][j] is 1:
#                     self.adaptee.lights.append((i,j))
#                 elif grid[i][j] is -1:
#                     self.adaptee.obstacles.append((i,j))
#
#         for i in range(len(self.adaptee.grid)):
#             for j in range(len(self.adaptee.grid[0])):
#                 for i, j in self.adaptee.lights:
#                     self.adaptee.grid[i][j] = 1
#                 for i, j in self.adaptee.obstacles:
#                     self.adaptee.grid[i][j] = -1
#
#         return self.adaptee.generate_lights()
#
#
# class MappingAdapter():
#     def __init__(self, adaptee):
#         self.adaptee = adaptee
#
#     '''–°–æ–∑–¥–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–≤–µ—Ç–∞. –ï—Å–ª–∏ 1 - –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞ –µ—Å–ª–∏ -1 - –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–æ—á–∫–µ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ä–∞–≤–Ω–æ –∑–∞–¥–∞–Ω–æ–º—É, –¥–æ–±–∞–≤–ª—è—é –≤ —Å–ø–∏—Å–æ–∫ —ç—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞). –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π.'''
#
#     def obj_map(self, grid, lights=True):
#         if lights:
#             key = 1  # –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞
#         else:
#             key = -1  # –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
#         the_list = []
#
#         # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–æ—á–∫–µ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ä–∞–≤–Ω–æ –∑–∞–¥–∞–Ω–æ–º—É, –¥–æ–±–∞–≤–ª—è—é –≤ —Å–ø–∏—Å–æ–∫ —ç—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
#         for i in range(len(grid)):
#             for j in range(len(grid[0])):
#                 if grid[i][j] == key:
#                     the_list.append(i, j)
#         return the_list
#
#     def lighten(self, grid):
#
#         # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
#         dim = (len(grid[0]), len(grid))
#         self.adaptee.set_dim(dim)
#
#         # –ø–æ–ª—É—á–∞—é —Å–ø–∏—Å–∫–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–≤–µ—Ç–∞
#         obsts = self.obj_map(grid, False)
#         lts = self.obj_map(grid, True)
#
#         # –ø–µ—Ä–µ–¥–∞—é —Å–ø–∏—Å–∫–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º–æ–º—É –∫–ª–∞—Å—Å—É Light
#         self.adaptee.set_obstacles(obsts)
#         self.adaptee.set_lights(lts)
#
#         # –ø–æ–ª—É—á–∞—é –∫–∞—Ä—Ç—É –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏ –æ—Ç Light
#         return self.adaptee.generate_lights()
#
# # –ë–æ—Ä–æ–≤–µ–Ω—Å–∫–∏–π –ù–∏–∫–æ–ª–∞–π –í–∞—Å–∏–ª—å–µ–≤–∏—á
# # —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É–∂–µ —Å–¥–µ–ª–∞–µ—Ç –ª—É—á—à–µ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥–∞:
# def _get_objects_by_grid(self, descriptor, grid):
#     result = []
#     for i in range(len(grid)):
#         for j in range(len(grid[0])):
#             if grid[i][j] == descriptor:
#                 result.append(i, i)
#     return result
#
# def get_lights(self, grid):
#     return self._get_objects_by_grid(1, grid)
#
# def get_obstacles(self, grid):
#     return self._get_objects_by_grid(-1, grid)
#
# –ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤ –ø–∏—Ç–æ–Ω–µ —ç—Ç–æ –ª–µ–≥–∫–æ. –ú–æ–∂–Ω–æ Enum –¥–ª—è 1 –∏ -1. –î–æ–±–∞–≤–∏—Ç—å typing –∏ —Ç.–¥.
# –ù—É –∏, –≤–æ-–≤—Ç–æ—Ä—ã—Ö, –æ—à–∏–±–∫–∞ —É –í–∞—Å –Ω–∞ —Å—Ç—Ä–æ—á–∫–µ 17.
# –° append —Ç–∞–∫ –Ω–µ–ª—å–∑—è –∫–∞–∫ —É –í–∞—Å –≤ –∫–æ–¥–µ (–≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –æ–ø–∏—Å–∫–∞). –ü–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–æ—Ä—Ç–µ–∂.
# –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:
# –í –∫–∞–∂–¥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –∫–æ—Ä—Ç–µ–∂–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è 2 –∑–Ω–∞—á–µ–Ω–∏—è: elem[0] -- –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ —à–∏—Ä–∏–Ω–µ –∫–∞—Ä—Ç—ã –∏ elem[1] -- –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ –≤—ã—Å–æ—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
# –ó–¥–µ—Å—å —Ä–∞–∑–≥–∞–¥–∫–∞ üôÇ

# UPD. –ù–µ, –≤—Å—ë —Ñ–∏–≥–Ω—è. –û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –Ω—É–∂–Ω–æ —Ç—â–∞—Ç–µ–ª—å–Ω–µ–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
# –î–∞, –æ—à–∏–±–∫–∞ (–±—ã–ª–∞) –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ–Ω–Ω–æ –≤ —Ç–æ–π —Å—Ç—Ä–æ—á–∫–µ, –æ –∫–æ—Ç–æ—Ä–æ–π –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏.
# –í—ã—Ö–æ–¥–∏—Ç, —á—Ç–æ –∑–¥–µ—Å—å: "–í –∫–∞–∂–¥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –∫–æ—Ä—Ç–µ–∂–∞...". –ù–∞–ø–∏—Å–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ.
# –°—É–¥—è –ø–æ –≤—Å–µ–º—É, –∏–º–µ–ª–æ—Å—å –≤ –≤–∏–¥—É "–í –∫–∞–∂–¥–æ–º –∫–æ—Ä—Ç–µ–∂–µ (—ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞)...".
